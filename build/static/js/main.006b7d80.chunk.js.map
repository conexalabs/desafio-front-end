{"version":3,"sources":["helper/removeCaracter.js","components/list.js","helper/renderArrow.js","components/header.js","helper/breackPoints.js","App.js","serviceWorker.js","index.js"],"names":["removeCaracter","number","replace","LocalizadorItem","item","cep","removeCaracterCep","console","log","className","href","empresa","cnpj","endereco","arrowStyled","type","onClick","isEdge","pointer","consts","PREV","style","disabled","background","border","color","fontSize","Header","props","state","error","itemArray","localStorage","getItem","JSON","parse","handleChange","bind","handleSubmit","event","target","name","value","this","setState","preventDefault","formatCNPJ","url","fetch","headers","then","res","axios","get","response","data","status","interator","fantasia","logradouro","municipio","unshift","setItem","stringify","message","onSubmit","mask","onChange","placeholder","length","breakPoints","width","itemsToShow","itemsToScroll","renderArrow","pagination","map","index","key","margin","textAlign","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.006b7d80.chunk.js","sourcesContent":["export const removeCaracter = (number) => {\r\n    return number.replace(/[^0-9]/g, '')\r\n}","import React from 'react';\r\n// import { Link } from 'react-router-dom'\r\nimport { removeCaracter } from '../helper/removeCaracter'\r\n\r\nfunction LocalizadorItem({ item }) {\r\n\r\n    const { cep } = item    \r\n    const removeCaracterCep = removeCaracter(cep)\r\n    console.log(removeCaracterCep)\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                {/* <Link to={`/maps/${removeCaracterCep}`}> */}\r\n                <a href='/maps/'>\r\n                    <h5>{item.empresa}</h5>\r\n                    <p>Razão social</p>\r\n\r\n                    <h5>{item.cnpj}</h5>\r\n                    <p>CNPJ</p>\r\n\r\n                    <h5>{item.endereco}</h5>\r\n                    <p className=\"margim-bottom-remove\">Endereço</p>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocalizadorItem;","import React from 'react'\r\nimport { consts } from 'react-elastic-carousel'\r\nimport { RiArrowLeftSLine, RiArrowRightSLine } from 'react-icons/ri'\r\n\r\n\r\nexport const arrowStyled = ({ type, onClick, isEdge }) => {\r\n    const pointer = type === consts.PREV ? <RiArrowLeftSLine /> : <RiArrowRightSLine />\r\n    return (\r\n        <button style={ style } onClick={onClick} disabled={isEdge}>\r\n            {pointer}\r\n        </button>\r\n    )\r\n}\r\n\r\nconst style = {\r\n    background: 'transparent',\r\n    border: 'none',\r\n    color: 'white',\r\n    fontSize: '2.5rem'\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport LocalizadorItem from './../components/list'\r\nimport InputMask from 'react-input-mask'\r\nimport { FaBuilding } from 'react-icons/fa'\r\nimport { removeCaracter } from '../helper/removeCaracter'\r\n\r\n//Carousel\r\nimport Carousel from 'react-elastic-carousel'\r\nimport { breakPoints } from '../helper/breackPoints'\r\nimport { arrowStyled } from '../helper/renderArrow'\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cnpj: '',\r\n            error: '',\r\n            itemArray: localStorage.getItem('items') ? JSON.parse(localStorage.getItem('items')) : []\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        let { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const state = this.state\r\n        \r\n        console.log(14);\r\n\r\n        try {\r\n            let formatCNPJ = removeCaracter(state.cnpj)\r\n            let url = `https://www.receitaws.com.br/v1/cnpj/${formatCNPJ}`\r\n            fetch(url, {\r\n                headers: {\r\n                    'Access-Control-Allow-Origin': 'https://localhost:3000',\r\n                    //'Access-Control-Allow-Credentials': true,\r\n                }\r\n            })\r\n                .then(res => {\r\n                    debugger\r\n                    console.log(res);\r\n                })\r\n\r\n            const response = await axios.get(`https://www.receitaws.com.br/v1/cnpj/${formatCNPJ}`, {\r\n                headers: {'Content-Type': 'application/json'}\r\n            })\r\n\r\n            const { data } = response\r\n            if (data.status === \"OK\") {\r\n\r\n                const interator = {\r\n                    empresa: data.fantasia,\r\n                    cnpj: data.cnpj,\r\n                    endereco: `${data.logradouro} ${data.municipio}`,\r\n                    cep: data.cep\r\n                }\r\n\r\n                this.state.itemArray.unshift(interator)\r\n                localStorage.setItem('items', JSON.stringify(this.state.itemArray))\r\n\r\n                state.error = ''\r\n                state.cnpj = ''\r\n                this.setState(state)\r\n            } else {\r\n                state.error = data.message\r\n                state.cnpj = ''\r\n                this.setState(state)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { error } = this.state\r\n        return (\r\n            <div className=\"flex-conteiner\">\r\n                <header>\r\n                    <h1><FaBuilding /> Localizador de Empresas</h1>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"content\">\r\n                            <InputMask\r\n                                mask=\"99.999.999/9999-99\"\r\n                                type=\"text\"\r\n                                name=\"cnpj\"\r\n                                value={this.state.cnpj}\r\n                                onChange={this.handleChange}\r\n                                placeholder=\"CNPJ...\" />\r\n\r\n                            <button className=\"localizar\">\r\n                                Localizar\r\n                            </button>\r\n                        </div>\r\n\r\n                        {error.length > 0 &&\r\n                            <span className=\"error\">{error}</span>}\r\n                    </form>\r\n\r\n                </header>\r\n\r\n                {this.state.itemArray.length > 0 ?\r\n                    <section>\r\n                        <Carousel breakPoints={breakPoints()} renderArrow={arrowStyled} pagination={false} className=\"allItem\">\r\n                            {this.state.itemArray.map((item, index) => (\r\n                                <LocalizadorItem key={index} item={item} />\r\n                            ))}\r\n                        </Carousel>\r\n                    </section> : <section>\r\n                        <div style={{ margin: 'auto', textAlign: 'center' }}>\r\n                            <h4>Localize acima a primeira empresa.</h4>\r\n                        </div>\r\n                    </section>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","export const breakPoints = () => {\r\n    return [{ width: 1, itemsToShow: 1 },\r\n    { width: 550, itemsToShow: 2, itemsToScroll: 1 },\r\n    { width: 850, itemsToShow: 4, itemsToScroll: 1 },\r\n    { width: 1150, itemsToShow: 5, itemsToScroll: 1 }]\r\n}","import React from 'react';\n\n//Css\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './css/styled.scss'\n\n//Components\nimport Header from './components/header'\n// import Map from './components/map'\n\nfunction App() {\n\treturn (\n\t\t<Header />\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}